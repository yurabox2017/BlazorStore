@page "/details/{ProductId:int}"
@inject IRepositoryProduct _db
@inject ProtectedLocalStorage _cartStorage

<h1 class="text-info mt-2">@(showAppointment ? "Book Appoinment" : "Appointment Details")</h1>

@if (AppointmentObj.Product is not null)
{
    @if (showAppointment)
    {
        <AppointmentComponent Appointment="AppointmentObj" OnShowDetails="ShowDetails" />
    }
    else
    {
        <DetailsComponent OnAddToCart="AddToCart" Appointment="AppointmentObj" />
    }
    @test
}


@code {
    [Parameter] public int ProductId { get; set; }
    public Appointment AppointmentObj { get; set; }
    List<int> listOfShopingCart = new();
    int productCount = 0;
    string test;
    List<string> testList = new();

    bool showAppointment = false;

    protected override async Task OnInitializedAsync()
    {
        AppointmentObj = new()
        {
            AppointmentDate = DateTime.Now
        };

        AppointmentObj.Product = await _db.GetSingleProductAsync(ProductId);
    }
    void OnAddToCart() => showAppointment = true;
    void ShowDetails() => showAppointment = false;

    async Task AddToCart()
    {
        //  test = await _cartStorage.GetFromSession<string>(StaticData.SessionKey);
        test = await _cartStorage.GetFromSession<string>(StaticData.SessionKey);
        testList.Add(test);

        if (listOfShopingCart is not null)
            listOfShopingCart.Add(ProductId);
        await _cartStorage.SetInSession<string>(StaticData.SessionKey, testList);

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        test = await _cartStorage.GetFromSession<string>(StaticData.SessionKey);
        //listOfShopingCart = await _cartStorage.GetFromSession<List<int>>(StaticData.SessionKey);
    }
}
