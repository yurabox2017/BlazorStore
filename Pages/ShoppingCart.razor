@page "/shoppingcart"
@inject ProtectedLocalStorage _cartStorage
@inject IRepositoryProduct _db
@inject NavigationManager _nav
@inject ProtectedLocalStorage _cartStorage

@if (showAppointment)
{
    <AppointmentComponent Appointment="AppointmentObj" Back="ShowAppointment" />
}
else
{
    <div class="container border rounded p-2">
        <div class="row"> <div class="col"><h1 class="text-info">Shopping Cart</h1></div></div>
        @if (products == null)
        {

            <div class="row">
                <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" /></div>
            </div>

        }
        else if (products.Count > 0)
        {
            <div class="row table-responsive">
                <div class="col">
                    <table class="table table-striped">
                        <thead class="bg-info">
                            <tr>
                                <th></th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in products)
                            {
                                <tr>
                                    <td><div><img src="@ImageToDisplayConverter(item.Image)" class="img-fluid" style="height:150px;width:150px" /></div></td>
                                    <td>@item.Name</td>
                                    <td>@item.Category.Name</td>
                                    <td>@item.Quantity</td>
                                    <td>@string.Format("{0:C}", item.Price)</td>
                                    <td class="text-right">
                                        <div class="btn-group">
                                            <button @onclick="(()=> DeleteFromCart(item))" class="btn btn-outline-danger">Delete</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row">
                        <div class="col-6 text-left">
                            <button class="btn btn-success" @onclick="BookNow">Book Now</button>
                        </div>
                        <div class="col-6 text-right">
                            <div class="text-info font-weight-bold">Total Price: @string.Format("{0:C}", totalPrice)</div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" /></div>
            </div>
        }
    </div>

}
@code {
    List<Product> products = new();
    private double totalPrice = 0;
    private List<int> listOfShoppingCart = new();
    bool showAppointment = false;
    public Appointment AppointmentObj { get; set; }

    async Task BookNow()
    {
        AppointmentObj = new()
        {
            AppointmentDate = DateTime.Now,
            Products = new List<Product>()
        };

        var productIds = await _cartStorage.GetFromSession<List<int>>(StaticData.SessionKey);

        foreach (var item in productIds)
        {
            var product = await _db.GetSingleProductAsync(item);
            AppointmentObj.Products.Add(product);
        }
        showAppointment = true;

    }

    void ShowAppointment() => showAppointment = false;
    async Task DeleteFromCart(Product product)
    {
        listOfShoppingCart.Clear();
        listOfShoppingCart = await _cartStorage.DelFromSessionAsync<List<int>>(StaticData.SessionKey, product.Id);

        if (listOfShoppingCart is not null)
            await LoadProducts();
        StateHasChanged();
    }
    string ImageToDisplayConverter(byte[] image)
    {
        if (image is null)
            return "";

        var base64 = Convert.ToBase64String(image);
        var finalString = string.Format("data:image/jpg;base64,{0}", base64);
        return finalString;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadProducts();

    }
    async Task LoadProducts()
    {
        listOfShoppingCart = new();
        totalPrice = 0;
        products = new();
        listOfShoppingCart = await _cartStorage.GetFromSession<List<int>>(StaticData.SessionKey);
        if (listOfShoppingCart is not null)
        {
            for (int i = 0; i < listOfShoppingCart.Count; i++)
            {
                var currentProduct = await _db.GetSingleProductAsync(listOfShoppingCart[i]);

                if (products.Exists(x => x.Id.Equals(currentProduct.Id)))
                    products.FirstOrDefault(x => x.Id.Equals(currentProduct.Id)).Quantity++;
                else
                {
                    currentProduct.Quantity = 1;
                    products.Add(currentProduct);
                }
            }
            products.ForEach(x =>
            {
                totalPrice += x.Price * x.Quantity;
            });
        }
        StateHasChanged();
    }
}
