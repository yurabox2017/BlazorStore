@page "/"
@inject IRepositoryProduct _db

<div class="row p-4 border rounded">
    @if (Products is null)
    {
        <div class="row">
            <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" /></div>
        </div>
    }
    else if (Products.Count > 0)
    {
        @foreach (var item in Products)
        {
            <div class="col-sm-12 col-md-6 col-lg-3">
                <div class="card mb-3" style="max-width: 18rem;">
                    <div class="card-header text-center">@item.Name</div>
                    <div class="card-body">
                        <img class="img-fluid" style="height:150px" src="@ImageToDisplayConverter(item.Image)" />
                    </div>
                    <div class="card-footer">
                        <div class="row">
                            <div class="col-6 text-primary">@string.Format("{0:C}", item.Price)</div>
                            <div class="col-6"><a href="/details/@item.Id" class="btn btn-success">Details</a></div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row">
            <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" /></div>
        </div>
    }
</div>

@code{
    List<Product> Products;

    protected override async Task OnInitializedAsync()
    {
        Products = await _db.GetAllProductsAsync();
    }

    string ImageToDisplayConverter(byte[] image)
    {
        if (image is null)
            return "";

        var base64 = Convert.ToBase64String(image);
        var finalString = string.Format("data:image/jpg;base64,{0}", base64);
        return finalString;

    }
}