@page "/product"
@using BlazorInputFile
@using System.IO

@inject IRepositoryProduct _db
@attribute [Authorize(Roles = StaticData.AdminRole)]
<div class="component-title row justify-content-between align-items-center">
    <div class="col-6">
        <h1 class="text-info">Product List</h1>
    </div>
    <div class="col-6 text-right">
        <button @onclick="SaveProduct" disabled="@addProductDisable" data-toggle="modal" data-target="#PopModalProduct" class="btn btn-info">Add New Product</button>
    </div>
</div>


@if (products == null)
{

    <div class="row">
        <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" /></div>
    </div>

}
else if (products.Count > 0)
{
    <div class="row table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Shade Color</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in products)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Category.Name</td>
                        <td>@item.Price</td>
                        <td>@item.ShadeColor</td>
                        @*<td>@ImageToDisplayConverter(item.Image)</td>*@
                        <td class="text-right">
                            <div class="btn-group">
                                <button @onclick="(()=> EditProduct(item))" class="btn btn-outline-primary">Edit</button>
                                <button @onclick="(()=> DeleteProduct(item))" class="btn btn-outline-danger">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="row">
        <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" /></div>
    </div>
}

@if (popModal)
{
    <div class="modal fade show" id="PopModalProduct" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" style="display:block" aria-hidden="true">
        <EditForm Model="@productObj" OnValidSubmit="@ValidSubmit">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title text-info" id="exampleModalLongTitle">@(!productObj.Id.Equals(0) ? "Update" : "Create") Product</h3>
                        <button type="button" class="close" @onclick="ShowClose" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row mb-4">
                            <div class="col-9">
                                <div class="row align-items-center">
                                    <div class="col-4">Product Name</div>
                                    <div class="col-8">
                                        <input type="text" class="form-control" @bind="productObj.Name" autofocus />
                                        <ValidationMessage For="@(() => productObj.Name)"></ValidationMessage>
                                    </div>

                                </div>
                                <div class="row align-items-center mt-4">
                                    <div class="col-4">Category Name</div>
                                    <div class="col-8">
                                        <select @onchange='(args => SelectionChanged("Category", args))' class="form-control">
                                            <option selected>Select Category</option>
                                            @foreach (var item in categories)
                                            {
                                                <option value="@item.Id" selected="@(item.Id == productObj.CategoryId ? true : false)">@item.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="row align-items-center mt-4">
                                    <div class="col-4">Goods Marker Name</div>
                                    <div class="col-8">
                                        <select @onchange='(args => SelectionChanged("GoodsMarker", args))' class="form-control">
                                            @foreach (var item in goodsMarkers)
                                            {
                                                <option value="@item.Id" selected="@(item.Id == productObj.GoodsMarkerId ? true : false)">@item.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="row align-items-center mt-4">
                                    <div class="col-4">Price</div>
                                    <div class="col-8">
                                        <input type="number" class="form-control" @bind="productObj.Price" autofocus />
                                        <ValidationMessage For="@(() => productObj.Price)"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="row align-items-center mt-4">
                                    <div class="col-4">Shade Color</div>
                                    <div class="col-8"><input type="text" class="form-control" @bind="productObj.ShadeColor" autofocus /></div>
                                </div>
                                <div class="row align-items-center mt-4">
                                    <div class="col-4">Image</div>
                                    <div class="col-8 align-items-center">
                                        <BlazorInputFile.InputFile OnChange="HandleSelection"></BlazorInputFile.InputFile>
                                    </div>
                                </div>
                            </div>
                            <div class="col-3">
                                <img style="width:100%" src="@ImageToDisplayConverter(ImageUploaded ?? productObj.Image)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ShowClose" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}


@code {
    private List<Category> categories;
    private List<GoodsMarker> goodsMarkers;
    private List<Product> products;
    private bool addProductDisable = true;
    public byte[] ImageUploaded { get; set; }

    bool popModal { get; set; } = false;

    Product productObj = new();

    protected override async Task OnInitializedAsync()
    {
        products = await _db.GetAllProductsAsync();
        categories = await _db.GetAllCategories();
        goodsMarkers = await _db.GetAllGoodsMarkers();

        if (categories.Count > 0 && goodsMarkers.Count > 0)
            addProductDisable = false;

    }

    public void ShowClose()
    {
        ImageUploaded = null;
        popModal = !popModal;
    }

    async Task SaveProduct()
    {
        productObj = new();
        productObj.Id = 0;

        categories = await _db.GetAllCategories();
        goodsMarkers = await _db.GetAllGoodsMarkers();
        //out of range
        productObj.CategoryId = categories.ToList()[0].Id;
        productObj.GoodsMarkerId = goodsMarkers.ToList()[0].Id;
        ShowClose();
    }

    async Task EditProduct(Product prodObj)
    {
        productObj = prodObj;

        categories = await _db.GetAllCategories();

        ShowClose();
    }

    async Task DeleteProduct(Product prodForEdit)
    {
        var result = false;

        result = await _db.DeleteProductAsync(prodForEdit.Id);
        products.Clear();
        products = await _db.GetAllProductsAsync();

    }

    async Task ValidSubmit()
    {
        var result = false;

        ShowClose();

        if (ImageUploaded is not null)
        {
            productObj.Image = ImageUploaded;

            ImageUploaded = null;
        }

        if (productObj.Id.Equals(0))
            result = await _db.CreateProductAsync(productObj);
        else
            result = await _db.UpdateProductAsync(productObj);

        products = await _db.GetAllProductsAsync();

    }

    async Task HandleSelection(IFileListEntry[] fileListEntry)
    {
        var file = fileListEntry.FirstOrDefault();
        if (file is not null)
        {
            MemoryStream ms = new();

            await file.Data.CopyToAsync(ms);

            ImageUploaded = ms.ToArray();
        }

    }

    string ImageToDisplayConverter(byte[] image)
    {
        if (image is null)
            return "";

        var base64 = Convert.ToBase64String(image);
        var finalString = string.Format("data:image/jpg;base64,{0}", base64);
        return finalString;

    }

    void SelectionChanged(string name, ChangeEventArgs args)
    {
        switch (name)
        {
            case "Category":
                if (int.TryParse(args.Value.ToString(), out int CategoryId))
                {
                    productObj.CategoryId = CategoryId;
                }
                break;
            case "GoodsMarker":
                //if (int.TryParse(args.Value.ToString(), out int GoodsMarkerId))
                //{
                //    productObj.GoodsMarkerId = GoodsMarkerId;
                //}
                break;
        }

    }
}