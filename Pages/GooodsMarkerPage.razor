@page "/goodsMarker"

@inject IRepositoryGoodsMarker _db

<div class="component-title row justify-content-between align-items-center">
    <div class="col-6">
        <h1 class="text-info">GoodsMarker List</h1>
    </div>
    <div class="col-6 text-right">
        <button @onclick="SaveGoodsMarker" data-toggle="modal" data-target="#PopModalGoodsMarker" class="btn btn-info">Add New Goods Marker</button>
    </div>
</div>

@if (goodsMarkers == null)
{

    <div class="row">
        <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" /></div>
    </div>

}
else if (goodsMarkers.Count > 0)
{
    <div class="row table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in goodsMarkers)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td class="text-right">
                            <div class="btn-group">
                                <button @onclick="(()=> EditGoodsMarker(item))" class="btn btn-outline-primary">Edit</button>
                                <button @onclick="(()=> DeleteCategory(item))" class="btn btn-outline-danger">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="row">
        <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" /></div>
    </div>
}

@if (popModal)
{
    <div class="modal fade show" id="PopModalGoodsMarker" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" style="display:block" aria-hidden="true">
        <EditForm Model="@goodsMarkerObj" OnValidSubmit="@ValidSubmit">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title text-info" id="exampleModalLongTitle">@(!goodsMarkerObj.Id.Equals(0) ? "Update" : "Create") Goods Marker</h3>
                        <button type="button" class="close" @onclick="ShowClose" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <input type="text" class="form-control" @bind="goodsMarkerObj.Name" autofocus placeholder="Введите Специальный тэг" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ShowClose" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {

    public List<GoodsMarker> goodsMarkers;
    public GoodsMarker goodsMarkerObj = new();
    bool popModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        goodsMarkers = await _db.GetAllGoodsMarkersAsync();
    }

    void SaveGoodsMarker()
    {
        goodsMarkerObj = new();
        goodsMarkerObj.Id = 0;
        ShowClose();

    }
    async Task EditGoodsMarker(GoodsMarker markForEdit)
    {
        goodsMarkerObj = markForEdit;
        ShowClose();

    }
    async Task DeleteCategory(GoodsMarker markForEdit)
    {
        var result = false;

        result = await _db.DeleteGoodsMarkerAsync(markForEdit.Id);
        goodsMarkers.Clear();
        goodsMarkers = await _db.GetAllGoodsMarkersAsync();

    }

    async Task ValidSubmit()
    {
        var result = false;

        if (goodsMarkerObj.Id.Equals(0))
            result = await _db.CreateGoodsMarkerAsync(goodsMarkerObj);
        else
            result = await _db.UpdateGoodsMarkerAsync(goodsMarkerObj);
        if (result)
            ShowClose();

        goodsMarkers = await _db.GetAllGoodsMarkersAsync();

    }


    void ShowClose() => popModal = !popModal;

}
