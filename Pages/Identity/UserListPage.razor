@page "/users"
@attribute [Authorize(Roles = StaticData.AdminRole)]
@inject IUserRepository _db
@inject UserManager<IdentityUser> _userManager
@*если applicationuser то надо добавлять в сервис*@

@if (hideDetails)
{

    if (applicationUsers is null)
    {
        <div class="row">
            <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" /></div>
        </div>
    }
    else if (applicationUsers.Count > 0)
    {

        <div class="row table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>UserName</th>
                        <th>Email</th>
                        <th>EmailConfirmed</th>
                        <th>Lock out</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in applicationUsers)
                    {
                        <tr>
                            <td>@item.UserName</td>
                            <td>@item.Email</td>
                            <td>@(item.EmailConfirmed ? "Yes" : "No")</td>
                            @*<td>@item.FullName</td>*@
                            <td>@(item.LockoutEnd is not null ? "Yes" : "No")</td>
                            <td class="text-right">
                                <div class="btn-group">
                                    <button @onclick="(() => Details(item))" class="btn btn-outline-info">Details</button>
                                    <button @onclick="(() => LockUser(item))" class="btn btn-outline-danger">LockUser</button>
                                </div>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" /></div>
        </div>
    }
}
else
{
    <UserDetail UserRoles="userRoles" Back="Back" SaveRole="SaveRole" AddRole="AddRole" DeleteRole="DeleteRole" IdentityRoles="identityRoles" IdentityUser="applicationUserObj"></UserDetail>
}


@code {
    private bool hideDetails = true;
    private List<IdentityUser> applicationUsers;
    private IdentityUser applicationUserObj;
    private List<IdentityRole> identityRoles;
    private IList<string> userRoles;

    protected override async Task OnInitializedAsync()
    {
        applicationUsers = await _db.GetAllUsersAsync();
    }
    async Task LockUser(IdentityUser identityUser)
    {
        bool result = false;
        result = await _db.SetLockUserAsync(identityUser, true, 999);
        if (result)
            applicationUsers = await _db.GetAllUsersAsync();
    }
    void Back() => hideDetails = !hideDetails;

    async Task Details(IdentityUser applicationUser)
    {
        applicationUserObj = applicationUser;
        identityRoles = await _db.GetAllRolesAsync();
        userRoles = await _db.GetUserRolesAsync(applicationUser);

        hideDetails = !hideDetails;
    }
    void AddRole(string role)
    {
        userRoles.Add(role);

    }
    void DeleteRole(string role)
    {
        userRoles.Remove(role);
    }
    async Task SaveRole(IdentityUser identityUser)
    {
        await _db.EditRoleAsync(identityUser, userRoles);

    }

}
