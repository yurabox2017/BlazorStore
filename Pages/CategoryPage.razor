@page "/category"

@inject IRepositoryCategory _db

<div class="component-title row justify-content-between align-items-center">
    <div class="col-6">
        <h1 class="text-info">Category List</h1>
    </div>
    <div class="col-6 text-right">
        <button @onclick="ShowModal" data-toggle="modal" data-target="#PopModalCategory" class="btn btn-info">Add New Category</button>
    </div>
</div>

<ModalCategory @ref="modal" Save="SaveCategory" Category="Category"></ModalCategory>

@if (categories == null)
{

    <div class="row">
        <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/108183/screenshots/5331825/loading_xxi.gif" /></div>
    </div>

}
else if (categories.Count > 0)
{
    <div class="row table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in categories)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td><button class="btn btn-primary">Edit</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="row">
        <div class="col text-center"> <img height="200" src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=800x600" /></div>
    </div>
}


@code {
    List<Category> categories;
    ModalCategory modal;
    public Category Category { get; set; } = new Category();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        categories = await _db.GetAllCategoriesAsync();
    }

    void ShowModal() => modal.Show();

    async Task SaveCategory(Category category)
    {
        await _db.CreateCategoryAsync(category);
        modal.Hide();
        categories = await _db.GetAllCategoriesAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1000);
    }

}
